I COMMANDS IN DOCKER 
  -----------------
note that this is note a required section in the exam, but it is important to know as it is a topic that is usually overlooked. 

Refresh the memory about commands in docker : 
let say u want to run a docker container from ubuntu image, the command will be. 
> docker run ubuntu /this will run a docker container and exits immediately.
So why is that ? 
Containers are not designed to run a OS like vms. Containers run on process and exist once it is completed.
So who do u define wich process that will run in the container ? 
When u check a docker file, you will see a instruction
 CMD ["command"] /this define the programm that will run when the container is started 
In our ubuntu cas, the default command is "bash" wich will be waitting for a terminal. since docker does not attach any by default, the container exits. 

To overwrite the default command, you can simply the new process to run to the command like this: 
> Docker run ubuntu sleep 5 /this will run the container and waits for 5 seconds. 
You can make that behevor permment by change the docker file, the default command. 
  CMD command param1
  or 
  CMD ["command","param1"]
exemple : 
 we change change the docker file for ubuntu like this : 
  CMD ["sleep","5"]
So this will always sleep for 5 seconds. 

But what if we wanted the user to be able to set the sleeping time ? something like this ? >docker run ubuntu-sleeper 10 
Well, we will use the instruction ENTRYPOINT ["command"]

The ENTRYPOINT instruction is like CMD instruction as u can specifie the programme that will run by default, but with ENTRYPOINT command, what ever u add to docker run command will be append to the default command. Wich is not the case for the CMD instruction 

so note that if u use 
 CMD the whole command given will be replaced by what u add to the command line
with 
 ENTRYPOINT what u add to the command line will be appended 
        8080/TCP   

II COMMANDS & ARGUMENTS IN K8s
   --------------------------
 Let's say we want to create a pod from the ubuntu-sleeper image that we created above: 

apiVersion : v1
kind : Pod 
metadata: 
  name : ubuntu-slepper
  labels: 
    app : sleeper 
spec : 
  containers : 
    - name : ubuntu-sleeper
      image : ubuntu-sleeper 
This will create a pod that will live for 5 second (the default value) and the dies. 
So how do u specifie a custom time to sleep ? 
for that u add args : ["custom_time"] in the pod's spec 
apiVersion : v1
kind : Pod
metadata:
  name : ubuntu-slepper
  labels:
    app : sleeper
spec :
  containers :
    - name : ubuntu-sleeper
      image : ubuntu-sleeper
      args : ["10"]

So what if you want to overwrite the default command ? the one given in docker file as ENTRYPOINT ? 
for that u add command : ["new command"] in the pod's spec 
apiVersion : v1
kind : Pod
metadata:
  name : ubuntu-slepper
  labels:
    app : sleeper
spec :
  containers :
    - name : ubuntu-sleeper
      image : ubuntu-sleeper
      command : ["sleep2.O"]
      args : ["10"]
so we have : 

    in docker file        vs      in definition file 

ENTRYPOINT          =========>   command 
CMD                 =========>   args 

III A quick note on editing PODs and Deployments
    -------------------------------------------

you CANNOT edit specifications of an existing POD other than the below.

spec.containers[*].image

spec.initContainers[*].image

spec.activeDeadlineSeconds

spec.tolerations

For example you cannot edit the environment variables, service accounts, resource limits (all of which we will discuss later) of a running pod. But if you really want to, you have 2 options:

1. Run the kubectl edit pod <pod name> command.  This will open the pod specification in an editor (vi editor). Then edit the required properties. When you try to save it, you will be denied. This is because you are attempting to edit a field on the pod that is not editable. A copy of the file with your changes is saved in a temporary location.

You can then delete the existing pod by running the command:
> kubectl delete pod webapp
Then create a new pod with your changes using the temporary file
> kubectl create -f /tmp/kubectl-edit-ccvrq.yaml

2. The second option is to extract the pod definition in YAML format to a file using the command
 > kubectl get pod webapp -o yaml > my-new-pod.yaml
Then make the changes to the exported file using an editor (vi editor). Save the changes
 > vi my-new-pod.yaml
Then delete the existing pod
 > kubectl delete pod webapp
Then create a new pod with the edited file
 > kubectl create -f my-new-pod.yaml

Edit Deployments
With Deployments you can easily edit any field/property of the POD template. Since the pod template is a child of the deployment specification,  with every change the deployment will automatically delete and create a new pod with the new changes. So if you are asked to edit a property of a POD part of a deployment you may do that simply by running the command
 > kubectl edit deployment my-deployment

LAB I COMMANDS AND ARGUMENTS  to access the the lab go to https://uklabs.kodekloud.com/topic/commands-and-arguments/

1) How many PODS exist on the system  ? 
 > kubectl get po /there is one pod named ubunutu-sleeper 
2) What is the command used to run the pod ubuntu-sleeper ?
 > kubectl describe po ubuntu-sleeper or kubectl edit po ubuntu-sleeper 
  /and check the command used 
3) Create a pod with the ubuntu image to run a container to sleep for 5000 seconds. Modify the file ubuntu-sleeper-2.yaml 
 > vim ubuntu-sleeper-2.yaml 
 /edit the file to add command and args
 > kubectl create -f ubuntu-sleeper-2.yaml 
4) Create a pod using the file mamed ubuntu-sleeper-3.yaml.  there is something wrong with it. Try to fix it. 
 > vim ubuntu-sleeper-3.yaml 
  correct the error 
 > kubectl create -f ubuntu-sleeper-3.yaml 
5) Update pod ubuntu-sleeper-3 to sleep for 2000 seconds 
 > kubectl edit po ubuntu-sleeper-3 
  /this will create a temporaly file like this /tmp/kubectl-edit-584963160.yaml,  
 > kubectl delete po ubuntu-sleeper-3
  /remember, u can note update the command and args fields in a pod, u have to kill it and recreate it
 > kubectl create -f /tmp/kubectl-edit-584963160.yaml
6) inspect the file Dockerfile given in this dir, what command is run at container startup ? 
  > vim Dockerfile / and check for  what is given as CMD or ENTRYPOINT 
  in our case, it is : python app.py
7) inspect the file Dockerfile2, what command is run at container startup ? 
  > vim Dockerfile2 /and check the default command 
  in this case, the command is : 
  python app.py --color red 

8) inspect the two files under the dir webapp-color-2. what command is run at container startup ? 
 > vim Dockerfile2 /and check 
 in this case, it is : python app.py --color pink

9)Create a pod with the given specifications. By default it displays a blue background. Set the given command line arguments to change it to green
  > vim default-blue-args-green.yaml 
  > kubectl create -f !$

_______END LAB I ______________________

III 1  ENVIRONMENT VARIABLES 
    ---------------------

You can set environmenet variable in a pod by sp√©cifiying the env in the spec section like this : 

apiVersion : v1
kind : Pod
metadata : 
   name : mypod
   labels : 
     tier : web
spec : 
  containers : 
    - name : container_name 
      imange : imange 
      ports : 
        - containerPort : 9999
      env : 
        - name : 
          value : 
note that env is an array, so each element starts with a - 
There multiple ways of setting env value ; 
1 env : 
    - name : APP_COLOR 
      value : pink 
  /plain key value 

2 env : 
    - name : APP_COLOR 
      valueFrom : 
         configMapKeyRef : 
  /From configMaps 

3 env : 
    - name : APP_COLOR 
      valueFrom : 
        SecretKeyRef : 
 /Secrets 

4 envFrom : 
   - configMapRef : 
         name : 


III  2 CONFIGMAPS 
     ------------

ConfigMaps are used to pass configuration data in the form of key value pairs in Kubernetes. 
When a Pod is created, injects the config map into the pod, so the key-value parents are availble as enviroment variables for the application hosted inside the container in the pod. 

As other obejects in k8s, a configMap can be created using imperative command or the declarative way, 
imperative : kubectl create configmap <config_name> --from-literal=<key>=<value>
         or  kubectl create configmap <config_name> --from-file=<path-to-file>

Declarative way using a definition file : 
apiVersion : v1
kind : configMap
metadata : 
  name : config_name 
data : 
   key : value
   key1 : value2
   key3 : value3 
   ...

LAB 2 : CONFIGMAPS to access the lab go to https://uklabs.kodekloud.com/topic/configmaps-2/

1) How many PODs exist on the system in the current(default) namespace ?
 > kubectl get po /there is on pod named webapp-color 
2) What is the environment variable name set on the container in the pod?
 > kubectl describe po webapp-color /check the spec 
3) What is the value set on the environment variable APP_COLOR on the container in the pod? 
 > kubectl describe po webapp-color /check the spec
4) Update the environment variable on the POD to display a green background Note: Delete and recreate the POD. Only make the necessary changes. Do not modify the name of the Pod
 > kubectl edit pod webapp-color /and edit the value of the env, this will generate an error and a tmp file 
  /delete the pod and recreate the pod using the tmp file 
5) How many ConfigMaps exists in the default namespace ? 
 > kubectl get configMaps  / there are two configMaps, one of them is named db-config
6) Identify the database host from the config map db-config 
 > kubectl describe configMap db-config 
7) Create a new ConfigMap for the webapp-color POD. Use the spec given below.
      ConfigName Name: webapp-config-map
      Data: APP_COLOR=darkblue
 > kubectl create configmap webapp-config-map --from-literal=APP_COLOR=darkblue
8) Update the environment variable on the POD to use the newly created ConfigMap
   Note: Delete and recreate the POD. Only make the necessary changes. Do not modify the name of the Pod
 > kubectl edit pod webapp-color /and edit the value of the env, this will generate an error and a tmp file
  /delete the pod and recreate the pod using the tmp file

_____ END LAB 2 ________________


IV  SECRETS 
    --------
Secrets are used to store sensitve information like passwords or keys. there are similar to configMaps except that they are stored in a encoded or hashed format. As with configmaps, there are two steps involed in working with secrets : 
First, create the secret second, injecte it into pod. 
There are two way to create a secrete; imperative way without using a secret definition file and declarative way by using a secret definition file. 

imp√©rative way :  /this way, u can directly specify the key value pairs in the command line itselft. 
 > kubectl crate secret generic <secret_name> --from-literal=<key>=<value>
declarative : 

apiVersion : v1
kind : Secret
metadata : 
  name : <name_of_the_secret>
data : 
  key1 : value1
  key2 : value2
  key3 : value3

However, we seen that secrets are used to store sensitve date and are stored in an encoded format. So value1, value2, value3 ...
must be encoded. But how do u convert the data from plain text to an encoded format ? 
on a linux host, run the command : 
 > echo -n 'value(i)' | base64
to decode, u can use the same command but add --decode after
 > echo -n 'dmFsdWUoaSk=' | base64 --decode 

to use secret in the pod, u put it in the definition file. In the spec section add; 

envFrom : 
   - secretRef : 
         name : <secret_name>

____ LAB 3 SECRETS to access the lab go to : https://uklabs.kodekloud.com/topic/secrets-4/ 

1) How many Secrets exist on the system in the current(default) namespace ? 
 > kubectl get secrets /there is one secret named default-token
2)  How many secrets are defined in the default-token secret ?
 > kubectl describe secrets default-token 
2) What is the type of the default-token secret? 
 > kubectl get secret /and check the Type colmum 
3) What is the type of the default-token secret? 
 > kubectl describe secret default-token 
4) Create a new secret named db-secret with the data given below. You may follow any one of the methods discussed in lecture to create the secret. 
   secret name : db-secret
   secret 1 : DB_Host=sql01
   secret 2 : DB_User=root
   secret 3 : DB_Password=password123
> vim db-secret.yaml 
5) Configure webapp-pod to load environment variables from the newly created secret. Delete and recreate the pod if required.
> kubectl edit po webapp-pod / 
  and in the spec : 
     envFrom : 
       - secretRef :
           name : db-secret

______END LAB 3___________


V SECURITY 
  --------

V.1 Security in Docker 
  --------------------
Let us start with a host with Docker installed on it. the host have it's own processes. Let now run an ubuntu container that runs a process that sleeps for an hour. Remember, container are not completely isolated from thier hosts, they share the same kernel. 
So containers are isoleted using Namespaces in Linux. When a container is run, it can only see processes in it's own namespace. However, the process of the container are visible in the host but, ofcause, with a different process IDs. That is about processes. 

Let's see about users. 
The host has a set of Users, a root user as well as number of non-root users. By Default, Docker runs processes within containers as the root user. But u can change that default behavours and set a user u want by specifying the user id. In docker u can use this command : 
> docker run --user=1000 ubuntu sleep 3600
You can also do that in the Dockerfile using the USER instrucation > docker run --user=1000 ubuntu sleep 3600 

One question : if u run a container with a root user, is it the same root user in the container as the host ? wich will make the root user in the container to do anything on the host system ? 
> Well, Docker implements a set of security features that limits the abilities of the root user within a container. so the do not have quite same capabilities. By default, some capabilities are not given to the root user in the container. However, u can add some capabilities by add the --cap-add <capability> in the docker run command: 
> docker run --cap-add MAC_ADMIN ubuntu. 
 /you can also drop some capabilities by using --cap-drop flag
 /you can also give all the capabilities to the user by adding the flag --privileged. 

you can check all capabilities avaible in linux system at this link : /usr/include/linux/capability.h  


V.2 Security context in kubernetes 
    ------------------------------
The security managment we just saw in docker containers are applicable in kubernetes' pods. In Pods, you may choose to configure the security settings at a container level or at pod level. If you configure it at a pod level, the settings will carry over to all the containers within the pod. It you configure it at both the pod and the container, the settings on the container will override the settings on the pod level. 
Let's see the pod's definition file with security context defined : 
 apiVersion : v1 
 kind : Pod 
 metadata : 
   name : webapp 
 spec : 
   securityContext :  /Here we define a security context at the pod level
       runAsUser : 1000
   containers : 
      - name : ubuntu 
        image : ubuntu 
        command : ["sleep","3600"]
        securityContext : 
           runAsUser : 1010
           capabilities : 
              add : ["MAC_ADMIN"]

To specify the security context at the container level, you can move the whole definition at the container level.
NOTE : Capabilities are only supported at the containter level and not at the pod level.  

LAB 4 SECURITY CONTEXTS to access the lab go to https://uklabs.kodekloud.com/topic/security-contexts-3/

1) What is the user used to execute the sleep process with the ubuntu-sleeper pod ? 
 > kubectl describe po ubuntu-sleeper /no user specified, so it will be the default user (root)
2) Edit the pod ubuntu-sleeper to run the sleep process with user ID 1010. 
 > kubectl edit po ubuntu-sleeper 
   edit the security context, delete the pod and recreate it with the tmp file 
3) A Pod definition file named multi-pod.yaml is given. With what user are the processes in the web container started?
   The pod is created with multiple containers and security contexts defined at the Pod and Container level.
 > vim multi-pod.yaml /inspect the file to find out the user. 
4) With what user are the processes in the sidecar container started?
   The pod is created with multiple containers and security contexts defined at the Pod and Container level.
  /inspect the same file as before to see the user under the container sidecar, if none is specified check the pod level 
 
5) Update pod ubuntu-sleeper to run as Root user and with the SYS_TIME capability
  > kubectl edit po ubuntu-slpeer 
  /add the capabities section at the container level 

6) now update the pod to also make use of the NET_ADMIN capability. 
 > edit the same file and add NET_ADMIN in the table 

_______END LAB 4_____________



VI SERVICE ACCOUNTS 
   ----------------

The concept of service accounts is linked to other security related concepts in k8s. 
There are two types of kubernetes accounts in k8s, 

           User account                    vs                 Service account 

  these are used by humans                            thes are used by machines 
  they can be admin's                                 For the applications to use K8s, they have to have an account to make call to 
  or Developper                                       the apiServer. 

You can create a service account in imperative way by running this command : 
> kubectl create serviceaccount <name_of_the_service_account>
When a service account is created, it also create a token wich will be used with the application to authenticate when calling the apiserver. Note that this token is stored as a secret. 
note that if the thierd part application is used in the same cluster, the service account can be mounted as a volume, so that there will be no need of manuel configuration. 
When u create a k8s cluster, there is a default service account created it named default. note that each namespace has it's own default service account. This default service account is the one used by the pods by default. 

When creatting a pod, u can choose to use a another service account than the default one by adding the following in the spec 
serviceAccountName : <service_account_name>

___ LAB 5 SERVICE ACCOUNT to access the lab, go to https://uklabs.kodekloud.com/topic/service-account-2/

1) How many Service Accounts exist in the default namespace ? 
 > kubectl get serviceAccount
2) What is the secret token used by the default service account ?
 > kubectl describe serviceAccount default 
  /check the Mountable secrets 
3) We just deployed the Dashboard application. Inspect the deployment. What is the image used by the deployment? 
 > kubeclt get deploy  /the created deploy is named web-dashboard 
 > kubectl describe deploy web-dashboard 
4) insect the Dashboard Application Pod and identify the Service account mounted on it 
 > kubectl describe po <pod_name>
5) At what location is the ServiceAccount credentials available within the pod? 
 > kubectl describe po <pod_name>  
6) The application needs a ServiceAccount with the Right permissions to be created to authenticate to Kubernetes. The 'default' ServiceAccount has limited access. Create a new ServiceAccount named 'dashboard-sa'.
 > kubectl create serviceAccount dashboard-sai
7) Update the deployment to use the newly created ServiceAccount
   Edit the deployment to change ServiceAccount from 'default' to 'dashboard-sa'
__________END LAB 5_______________


VII RESOURCE REQUIREMENTS
    ---------------------

Let's say we a have three node in the cluster, each has cpu, Ram and disc resources available. 
When ever a pod is deployed on the node will consume a bit of that resources. It is the job of the scheduller to place Pod's across the node. If there is no enough resource in all the nodes, the pod will go pending state. 

By default, container in a pod requires 0.5 CPU, 256Mi of memory. but if u know that your pod may need more resources u can specifie that in the definition file in the spec section under the containers object. 
 apiVersion : v1
 king : Pod 
 metadata : 
   name : my_pod 
 spec : 
   containers : 
    - name : my_pod
      image : apache 
      ports : 
        - containerPort : 8080 
      resources : 
        requests : 
          memory : "1Gi"
          cpu : 1
Know that a pod in a node can use all the resources available by default. u can set a limit so that the pod do not suffocate the native processors on the node. u just add limits in the definition file.

      resources :
        requests :
          memory : "1Gi"
          cpu : 1

In the previous lecture, I said - "When a pod is created the containers are assigned a default CPU request of .5 and memory of 256Mi". For the POD to pick up those defaults you must have first set those as default values for request and limit by creating a LimitRange in that namespace.

for the memory : https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/
apiVersion: v1
kind: LimitRange
metadata:
  name: mem-limit-range
spec:
  limits:
  - default:
      memory: 512Mi
    defaultRequest:
      memory: 256Mi
    type: Container
 
for the cpu : https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-limit-range
spec:
  limits:
  - default:
      cpu: 1
    defaultRequest:
      cpu: 0.5
    type: Container

for more information about resource limits : https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource

___ LAB 6 to access the lab go to : https://uklabs.kodekloud.com/topic/resource-limits-2/

1) A pod called rabbit is deployed. Identify the CPU requirements set on the Pod
 > kubectl describe po rabbit 
2) Delete the rabbit Pod 
 > kubectl delete po rabbit 
3) Another pod called elephant has been deployed in the default namespace. It fails to get to a running state. Inspect this pod and identify the Reason why it is not running. 
 > kubectl describe po elephant 
4) The status OOMKilled indicates that it is failing because the pod ran out of memory. Identify the memory limit set on the POD.
 /same command 
5) The elephant pod runs a process that consume 15Mi of memory. Increase the limit of the elephant pod to 20Mi.
 > kubectl edit po elephant 

_____ END LAB 6 _______________


VIII TAINTS AND TOLERATIONS 
     ______________________

Taints and tolerations have nothing to do with security or intrusion on a cluster. taints and tolerations are used to set restrictions on what pods can be schedulled on a node. Know that taints are set on nodes and tolerations are set on pods. 

To taint a node u can use this command. 
> kubectl taint nodes node-name key=value:taint-effect
there are 3 taint effects : 
 NoSchedule / The pods with out toleration to the taint will not be scheduled on the node. 
 PreferNoSchedule / The sheduler will try to avoid placing pods without taint toleration but it not guaranteed. 
 NoExecute / New pods will not be scheduled on the node and existing pod will be evicted to be deployed away if they not tolerate the taint.

tolerations are defined in the pod definition file under the spec section : 

   tolerations : 
    - key : "key"
      operator : ""
      value : "value"
      effect : "taint-effect"

LAB 7 TAINTS AND TOLERATION To access the lab go to : https://uklabs.kodekloud.com/topic/taints-and-tolerations-3/

1) How many nodes exist on the system including the controlplane node?
  > kubectl get no 
2) Do any taints exist on node01 node ? 
  > kubectl describe no node01 | grep Taint
3) Create a taint on node01 with key of spray, value of mortein and effect of NoSchedule 
  > kubectl taint node node01 spray=mortein:NoSchedule
4) Create a new pod with the nginx image and pod name as mosquito.
  > kubectl run mosquito --image=nginx 
5) What is the state of the POD? 
   /Pending becouse the pod has no toleration and all the nodes are tainted 
6) Create another pod named bee with the nginx image, which has a toleration set to the taint mortein. 
   > kubectl create -f toleration_bee_pod.yaml 
7) Do you see any taints on controlplane node? 
   > kubectl describe no controlplane | grep Taints
8) Remove the taint on controlplane, which currently has the taint effect of NoSchedule. 
   > kubectl taint node controlplane node-role.kubernetes.io/master:NoSchedule-

------- END LAB 7 ____________________

IX NODE SELETORS && NODE AFFINITY 
   ------------------------------

Imagine we have a 3 node cluster of wich two are small nodes with low hardware resources and on of them is large with high resources.And we have different kinds of workloads. You would like to dedicate that data processing workloads that require more resources to the larger node. For that, u can configure the node to run on a partical node.
there are two ways to do so : 

  1 Node selectors : 
This is simple and easy way. 
Under the spec section add
  nodeSelector : 
     size : Large /this must be a label on the node Large. 
     /to label a node, run this command ! 
     > kubectl label nodes <node-name> <label-key>=<label-value>
 exemple : kubectl label nodes node-1 size=Large

however, this way have limitations, for exemple, you can not define more than one label for exemple Large or medium.

   2 Node affinity : 
The purpose of node affinity feature is to ensure that pods are hosted on particular nodes. 
This way provides more advanced capabilities to limit pod placement on specific nodes but with more complexity. 
for this, specifie the node affinity in the spec section under containters 

affinity : 
  nodeAffinity : 
    requiredDuringSchedulingIgnoredDuringExecution : /affinity type  
      nodeSelectorTerms : 
      - matchExpressions : 
          - key : size
            operator : In 
              values : 
                 - Large 

there are 3 affinity types : 
requiredDuringSchedulingIgnoredDuringExecution
preferredDuringSchedulingIgnoredDuringExecution
requiredDuringSchedulingRequiredDuringExecution

_______ LAB 8 node affinity to access the lab go to : https://uklabs.kodekloud.com/topic/node-affinity-3/ _____

1) How many Labels exist on node node01 ?
  > kubectl get nodes node01 --show-labels 
2) Apply a label color=blue to node node01 
  > kubectl label node node01 color=blue 
3) Create a new deployment named blue with the nginx image and 3 replicas
  > kubectl create deploy blue --image=nginx --replicas=3
  > or kubectl create -f deployment.yaml
4) Set Node Affinity to the deployment to place the pods on node01 only
  > kubectl edit deploy /add the affinity in the definition  

_______ END LAB 8 ___________ 

Certification Tips - Student Tips 
---------------------------------

Make sure you check out these tips and tricks from other students who have cleared the exam:

https://www.linkedin.com/pulse/my-ckad-exam-experience-atharva-chauthaiwale/

https://medium.com/@harioverhere/ckad-certified-kubernetes-application-developer-my-journey-3afb0901014

https://github.com/lucassha/CKAD-resources

 __________ END SECTION 3 ________                       
