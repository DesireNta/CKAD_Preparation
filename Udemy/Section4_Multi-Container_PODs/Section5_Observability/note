I READINESS AND LIVENESS PROBES 
  -----------------------------

I.1 Readiness probes 

A pod has status and some conditions, the pod's statuds tells us where the pod is in its lifecycle. 
When a pod is created it is in pending state, this correspond at time where the schedule is trying to find where to place the pod.
Once the pod is Scheduled, it goes in ContainterCreating status. After that, i goes in running state.
The status of the pod gives us only high level summary of a POD. But some times, you may want additional information. That where the conditions comes into play. Conditions is an array of true or false values that tell us the state of a pod. 
  PodScheduled : TRUE or FALSE 
  Initialized : TRUE or FALSE
  ContainersReady : TRUE or FALSE 
  Ready : TRUE or FALSE 
To see these conditions, run kubectl describe po command and look for conditons section. 
If the pod enter in ready status, that mean the application running on it is ready to accept user traffic. 
But somme applications need a bit of time to worm up and can be running but not yet ready to be used. 

As a developer of the application, you know better what time it takes for the application to be ready. There are diffirent ways that u can define if an application inside a container is actually ready. U can set up different kinds of tests or probes which is the appropriate term in case of a web application. 
So how to u set up those tests in k8s ? 
in the pod definition file, u add a section called readinessProbe under containers section. 
 exemple : 
apiVersion : v1
kind : Pod 
metadata : 
  name : worm_up_app
  labels : 
     app : worm_up_app
spec : 
  containers : 
  - name : worm_up_app
    image : simple_app
    ports : 
    - containerPort : 8080 
    readinessProbe : 
      httpGet : 
        path : /api/ready 
        port : 8O8O 
     initialDelaySeconds : 10 
     periodSeconds : 5
There are different ways a probe can be configured. for a http use httpGet option with the path and the port. For the tcp use the tcpSocket option with the port and for executing a command specify the exec option and command. You can add an additional delay to the probe (initialDelaySeconds). if you would like to specify how often to probe, u can add the (peridoSeconds) option. by default, after 3 failed attempts the application stops, u can configure a different attempts using (failureThreshold).

I.2 LIVENESS PROBES
    ---------------
Let's say u run a container using Docker, and it starts to serve users for some reason, the application crashes and the containers process exits. the container exits as well. So as Docker is not a orchestrotor, the application remains dead. In kubernetes, when that happens, k8s tries to restart the container. 

anothe scenario is when a container continues to run but the application is not working correctly. that is where liveness comes into play. 
A liveness probe can be configured on the container to periodically thest whether the application within is actually healthy. 
As an application developer, it is up to you to define what it means for the application to be alive. 
by making a http test for web service, or tcp test for DBs or just a command to execute. 

LAB 1 Readiness and liveness Probes, to access the lab go to : https://uklabs.kodekloud.com/topic/readiness-probes-2/

1) updadate the newly crated pod with a readinessProbe using the given spec : 
   - Pod name : simple-webapp-2
   - Image Name : kodekloud/webapp-delayed-start
   - Readiness probe : httpGett
   - http probe : /ready
   - http port : 8080 
 > kubectl edit po simple-webapp-2 /add the readiness probe to the containers section. 
2) update the pod with a livenessProbe using the given spec.
   - Pod name : simple-webapp-2
   - Image name : kodekloud/webapp-delayed-start
   - liveness Probe : httpGet
   - http probe : /live
   - http port : 8080 
   - Period Seconds : 1
   - Initial delay : 80 
  
